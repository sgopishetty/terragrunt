name: Build and Deploy App
# https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-amazon-elastic-container-service
on:
  workflow_call:
    inputs:
      git_project:
        description: "The GitHub project to deploy from"
        required: false
        type: string
        default: ${{ github.repository }}
      git_ref:
        description: "The GitHub branch or tag to deploy from"
        required: false
        type: string
        default: ${{ github.ref }}
      aws_region:
        description: "The AWS region to deploy to"
        required: false
        type: string
        default: "us-east-1"
      aws_role_arn:
        description: "The AWS role to assume"
        required: false
        type: string
        default: "arn:aws:iam::010526272542:role/github-ci"
      aws_role_duration_seconds:
        description: "The AWS role duration in seconds"
        required: false
        type: number
        default: 3600
      ecr_repository:
        description: "The ECR repository to publish to"
        required: false
        type: string
        default: "flaskapp"

jobs:
  Build:
    name: Build and Push Image to ECR
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      EPI_TEAM: "qe"
      EPI_ENVIRONMENT: "prod"
      AWS_REGION: ${{ inputs.aws_region }}
      AWS_ROLE_ARN: ${{ inputs.aws_role_arn }}
      AWS_ROLE_DURATION_SECONDS: ${{ inputs.aws_role_duration_seconds }}
      GIT_PROJECT: ${{ inputs.git_project }}
      GIT_REF: ${{ inputs.git_ref }}
      ECR_REPOSITORY: ${{inputs.ecr_repository}}
      # ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
      # ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
      # ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
      #                                             # file, e.g. .aws/task-definition.json
      # CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
    steps:
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.EPI_TEAM }}_shared_services_build_${{ env.EPI_ENVIRONMENT }}_action
          role-duration-seconds: ${{ env.AWS_ROLE_DURATION_SECONDS }}
          output-credentials: true

      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity
          aws configure list

      - name: Checkout - ${{ env.GIT_PROJECT }}@${{ env.GIT_REF }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GIT_PROJECT }}
          ref: ${{ env.GIT_REF }}
      
      - name: Determine commit SHA
        id: get-sha
        run: |
          if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
            MERGE_COMMIT_SHA=$(git rev-parse HEAD)
            echo "COMMIT_SHA=$MERGE_COMMIT_SHA" >> $GITHUB_ENV
            cat $GITHUB_ENV
          else
            PR_HEAD_SHA=$(git rev-parse ${{ github.event.pull_request.head.sha }})
            echo "COMMIT_SHA=$PR_HEAD_SHA" >> $GITHUB_ENV
            cat $GITHUB_ENV
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.COMMIT_SHA }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd app/
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    #   - name: Fill in the new image ID in the Amazon ECS task definition
    #     id: task-def
    #     uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
    #     with:
    #       task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #       container-name: ${{ env.CONTAINER_NAME }}
    #       image: ${{ steps.build-image.outputs.image }}

    #   - name: Deploy Amazon ECS task definition
    #     uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
    #     with:
    #       task-definition: ${{ steps.task-def.outputs.task-definition }}
    #       service: ${{ env.ECS_SERVICE }}
    #       cluster: ${{ env.ECS_CLUSTER }}
    #       wait-for-service-stability: true
