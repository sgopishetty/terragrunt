name: Terragrunt Plan and Deploy

on:
  workflow_call:
    inputs:
      git_project:
        description: "The GitHub project to deploy from"
        required: false
        type: string
        default: ${{ github.repository }}
      git_ref:
        description: "The GitHub branch or tag to deploy from"
        required: false
        type: string
        default: ${{ github.ref }}
      aws_region:
        description: "The AWS region to deploy to"
        required: false
        type: string
        default: "us-east-1"
      aws_role_arn:
        description: "The AWS role to assume"
        required: false
        type: string
        default: "arn:aws:iam::010526272542:role/github-ci"
      aws_role_duration_seconds:
        description: "The AWS role duration in seconds"
        required: false
        type: number
        default: 3600
      terragrunt_dir:
        description: "The Terragrunt directory to deploy"
        required: false
        type: string
        default: "./terraform/environment/prod"
      skip_apply:
        description: "Skip terragrunt apply job"
        required: false
        type: boolean
        default: false
      tf_version:
        description: "Terraform version to use"
        required: false
        type: string
        default: 1.2.0
      tg_version:
        description: "Terragrunt version to use"
        required: false
        type: string
        default: 0.50.2
      build_dir:
        description: "The build directory to save artifacts"
        required: false
        type: string
        default: ""
      build_extract:
        description: "Extract the downloaded files"
        required: false
        type: boolean
        default: false

run-name: Deploy '${{ inputs.git_project }}@${{ inputs.git_ref }}' from '${{ inputs.terragrunt_dir }}' by @${{ github.actor }}

jobs:

  Plan&Apply:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      EPI_TEAM: "qe"
      EPI_ENVIRONMENT: "prod"
      GIT_PROJECT: ${{ inputs.git_project || github.repository }}
      GIT_REF: ${{ inputs.git_ref || github.ref }}
      AWS_REGION: ${{ inputs.aws_region }}
      AWS_ROLE_ARN: ${{ inputs.aws_role_arn }}
      AWS_ROLE_DURATION_SECONDS: ${{ inputs.aws_role_duration_seconds }}
      TF_VERSION: ${{ inputs.tf_version }}
      TG_VERSION: ${{ inputs.tg_version }}
      COMMIT_SHA: ${{ github.sha }}

    steps:
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.EPI_TEAM }}_terragrunt_deploy_${{ env.EPI_ENVIRONMENT }}_action
          role-duration-seconds: ${{ env.AWS_ROLE_DURATION_SECONDS }}
          output-credentials: true

      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity
          aws configure list

      - name: Checkout - ${{ inputs.git_project }}@${{ inputs.git_ref }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GIT_PROJECT }}
          ref: ${{ env.GIT_REF }}

      - name: Terragrunt Init
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.TF_VERSION }}
          tg_version: ${{ env.TG_VERSION }}
          tg_dir: ${{ inputs.terragrunt_dir }}
          tg_command: "run-all init"

      - name: Terragrunt Plan
        id: plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.TF_VERSION }}
          tg_version: ${{ env.TG_VERSION }}
          tg_dir: ${{ inputs.terragrunt_dir }}
          tg_command: "run-all plan -out=tf.plan"
      
      - name: Terragrunt Apply
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.TF_VERSION }}
          tg_version: ${{ env.TG_VERSION }}
          tg_dir: ${{ inputs.terragrunt_dir }}
          tg_command: "run-all apply"


